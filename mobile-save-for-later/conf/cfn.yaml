Resources:
  ApiRoute53:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt
              - ApiDomainName
              - DistributionDomainName
          Type: A
          Name: !Ref ApiDomainName
  SaveForLaterWriteThrottleEvents:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: TableName
          Value: !Ref SaveForLaterDynamoTable
      AlarmActions:
        - !Ref DynamoNotificationTopic
      Namespace: AWS/DynamoDB
      Period: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmName: !Sub '${App}-${Stage}-articles-WriteCapacityUnitsLimit-BasicAlarm'
      ActionsEnabled: !FindInMap
        - StageVariables
        - !Ref Stage
        - AlarmActionsEnabled
      Statistic: Sum
      Threshold: 0
      Unit: Count
      MetricName: WriteThrottleEvents
  SaveArticlesLambdaPostApiPermissionStage:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref SaveArticlesLambda
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/syncedPrefs/me/savedArticles
        - __Stage__: '*'
          __ApiId__: !Ref SaveForLaterApi
  SaveForLaterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
              Effect: Allow
        - PolicyName: ssm-config
          PolicyDocument:
            Statement:
              Action:
                - 'ssm:GetParametersByPath'
              Resource: !Sub >-
                arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}/${Stage}/${Stack}
              Effect: Allow
        - PolicyName: dynamo-action
          PolicyDocument:
            Statement:
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
                - 'dynamodb:Query'
              Resource: !Sub >-
                arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-articles
              Effect: Allow
        - PolicyName: metrics
          PolicyDocument:
            Statement:
              Action:
                - 'cloudwatch:PutMetricData'
              Resource: '*'
              Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  SaveForLaterApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref SaveForLaterApiDeployment7818545d6f
      RestApiId: !Ref SaveForLaterApi
      StageName: !Ref Stage
  FetchArticlesLambdaGetApiPermissionStage:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref FetchArticlesLambda
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/syncedPrefs/me
        - __Stage__: '*'
          __ApiId__: !Ref SaveForLaterApi
  SaveForLaterApiDeployment7818545d6f:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref SaveForLaterApi
      Description: 'RestApi deployment id: 7818545d6f935a518be3b1f7ecebec1729443529'
      StageName: Stage
  SaveForLaterReadThrottleEvents:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: TableName
          Value: !Ref SaveForLaterDynamoTable
      AlarmActions:
        - !Ref DynamoNotificationTopic
      Namespace: AWS/DynamoDB
      Period: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmName: !Sub '${App}-${Stage}-articles-ReadCapacityUnitsLimit-BasicAlarm'
      ActionsEnabled: !FindInMap
        - StageVariables
        - !Ref Stage
        - AlarmActionsEnabled
      Statistic: Sum
      Threshold: 0
      Unit: Count
      MetricName: ReadThrottleEvents
  SaveForLaterApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: 1.0.0
          title: !Sub '${App}-${Stage}'
        paths:
          /syncedPrefs/me/savedArticles:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveArticlesLambda.Arn}/invocations
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
              consumes:
                - application/json
          /syncedPrefs/me:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchArticlesLambda.Arn}/invocations
              responses:
                '200':
                  description: 200 response
              produces:
                - application/json
        swagger: '2.0'
  ApiMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      Stage: !Ref Stage
      RestApiId: !Ref SaveForLaterApi
      DomainName: !Ref ApiDomainName
  FetchArticlesLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt FetchArticlesLambda.Arn
      Principal: apigateway.amazonaws.com
  SaveArticlesLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref DeployBucket
        S3Key: !Sub '${Stack}/${Stage}/${App}/${App}.jar'
      FunctionName: !Sub '${App}-SAVE-${Stage}'
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 384
      Environment:
        Variables:
          Stage: !Ref Stage
          App: !Ref App
          SavedArticleLimit: !Ref SavedArticleLimit
          Stack: !Ref Stack
          IdentityApiHost: !Ref IdentityApiHost
      Handler: 'com.gu.sfl.lambda.SaveArticlesLambda::handleRequest'
      Role: !GetAtt SaveForLaterRole.Arn
      Timeout: 60
      Runtime: java8
  SaveForLaterDynamoTable:
    DeletionPolicy: Retain
    Type: 'AWS::DynamoDB::Table'
    Properties:
      KeySchema:
        - KeyType: HASH
          AttributeName: userId
      TableName: !Sub '${App}-${Stage}-articles'
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      ProvisionedThroughput:
        WriteCapacityUnits: !FindInMap
          - StageVariables
          - !Ref Stage
          - TableWriteCapacity
        ReadCapacityUnits: !FindInMap
          - StageVariables
          - !Ref Stage
          - TableReadCapacity
  ApiDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: !Ref CertArn
      DomainName: !Sub '${App}.${HostedZoneName}'
  FetchArticlesLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref DeployBucket
        S3Key: !Sub '${Stack}/${Stage}/${App}/${App}.jar'
      FunctionName: !Sub '${App}-FETCH-${Stage}'
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      ReservedConcurrentExecutions: !FindInMap
        - StageVariables
        - !Ref Stage
        - ReservedConcurrency
      MemorySize: 394
      Environment:
        Variables:
          App: !Ref App
          Stage: !Ref Stage
          Stack: !Ref Stack
          IdentityApiHost: !Ref IdentityApiHost
      Handler: 'com.gu.sfl.lambda.FetchArticlesLambda::handleRequest'
      Role: !GetAtt SaveForLaterRole.Arn
      Timeout: 20
      Runtime: java8
Description: Implements save for later for mobile
Parameters:
  SavedArticleLimit:
    Type: Number
    Description: Saved article limit
  DynamoNotificationTopic:
    Type: String
    Description: SNS topic to notify when there's a dynamo throttling event
  HostedZoneName:
    Type: String
    Description: Name of HostedZone
  App:
    Default: mobile-save-for-later
    Type: String
    Description: Application name
  DeployBucket:
    Default: mobile-dist
    Type: String
    Description: S3 Bucket where riff-raff uploads artifacts on deploy
  CertArn:
    Type: String
    Description: ACM Certificate ARN
  HostedZoneId:
    Type: String
    Description: Id of HostedZone
  IdentityApiHost:
    Type: String
    Description: Identity App Host
  Stack:
    Default: mobile
    Type: String
    Description: Stack name
  Stage:
    Type: String
    Description: Stage name
    AllowedValues:
      - CODE
      - PROD
Mappings:
  StageVariables:
    CODE:
      ReservedConcurrency: 1
      AlarmActionsEnabled: false
      TableReadCapacity: 1
      TableWriteCapacity: 1
    PROD:
      ReservedConcurrency: 50
      AlarmActionsEnabled: true
      TableReadCapacity: 200
      TableWriteCapacity: 75